extends Node3D

@onready var camera = $PlayerCamera
@onready var selectionBox2D = $PlayerCamera/SelectionBox2D
var startSelectionPosition =  Vector2()

var mouseClickPosition3DResult
var raycastMouseClick3DResult
var mousePosition
var selection = []
var newSelection = []

func _physics_process(delta):
	mousePosition = get_viewport().get_mouse_position()
	
	if Input.is_action_just_pressed("LeftClick"):
		selectionBox2D.startSelectionPosition = mousePosition
		startSelectionPosition = mousePosition
		
		for selected in selection:
			selected.DisableSelectionRing()
			
	if Input.is_action_pressed("LeftClick"):
		selectionBox2D.mousePosition = mousePosition
		selectionBox2D.isVisible = true
	else:
		selectionBox2D.isVisible = false
	if Input.is_action_just_released("LeftClick"):
		SelectUnits()
		
	if Input.is_action_just_pressed("rightclick") && selection.size() != 0:
		for selected in selection:
			RaycastMouseClick()
			selected.beanSoldier.speed = 600
			selected.beanSoldier.beanNA.set_target_position(raycastMouseClick3DResult)

func SelectUnits():
	newSelection = []
	if mousePosition.distance_to(startSelectionPosition) < 16:
		var u = GetUnitUnderMouse()
		if u != null:
			newSelection.append(u)
	else:
		newSelection = GetUnitsInBox(startSelectionPosition, mousePosition)
	if newSelection.size() != 0:
		for selected in newSelection:
			selected.EnableSelectionRing()
		selection = newSelection
		
			
func GetUnitUnderMouse():
	var result = mouseClickPosition3DResult
	if mouseClickPosition3DResult and "Selectable" in mouseClickPosition3DResult.collider == selection:
		return result.collider

func GetUnitsInBox(topLeft, bottomRight):
	if topLeft.x > bottomRight.x:
		var temp = topLeft.x
		topLeft.x = bottomRight.x
		bottomRight.x = temp
	if topLeft.y > bottomRight.y:
		var temp = topLeft.y
		topLeft.y = bottomRight.y
		bottomRight.y = temp
	var box = Rect2(topLeft, bottomRight - topLeft)
	selection = []
	for selected in get_tree().get_nodes_in_group("Selectable"):
		if box.has_point(camera.unproject_position(selected.global_transform.origin)):
			selection.append(selected)
	return selection

func RaycastMouseClick():
	var spaceState = get_world_3d().direct_space_state
	var raycastOrigin = camera.project_ray_origin(mousePosition)
	var raycastTarget = raycastOrigin + camera.project_ray_normal(mousePosition) * 5000
	var physicsRaycastQuery = PhysicsRayQueryParameters3D.create(raycastOrigin, raycastTarget)
	var raycastResult = spaceState.intersect_ray(physicsRaycastQuery)
	
	if raycastResult.is_empty():
		return
	else:
		raycastMouseClick3DResult = raycastResult["position"]
	
func RaycastFromMouse():
	var spaceState = get_world_3d().direct_space_state
	var raycastOrigin = camera.project_ray_origin(mousePosition)
	var raycastTarget = raycastOrigin + camera.project_ray_normal(mousePosition) * 5000
	var physicsRaycastQuery = PhysicsRayQueryParameters3D.create(raycastOrigin, raycastTarget, 4)
	var raycastResult = spaceState.intersect_ray(physicsRaycastQuery)
	
	if raycastResult.is_empty():
		return
	else:
		mouseClickPosition3DResult = raycastResult["collider"]
