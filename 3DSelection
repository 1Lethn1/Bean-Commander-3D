extends CharacterBody3D

# beanRedM = BeanRedMesh
# beanNA = BeanNavigationAgent
# SR = SelectionRing

var speed = 600
var customVelocity

@onready var SR = $SelectionRing
@onready var beanRedM = $BeanSoldier_Red

@onready var beanNA = $NavigationAgent3D
@onready var combatRange = $CombatRange

var stuckMax = 9
var stuckCount = 0

var navPathGoalPosition = Vector3()
var lastPosition = Vector3()

var hasStopped = false
		
func _physics_process(delta):
	var movementDelta = speed * delta
	var currentLocation = global_transform.origin
	var nextLocation = beanNA.get_next_path_position()
	customVelocity = (nextLocation - currentLocation).normalized() * movementDelta
	velocity = velocity.move_toward(customVelocity, .25)
	beanNA.set_velocity(customVelocity)
	
	if beanNA.navigation_finished:
		return

func StuckCheck ():
	if lastPosition.distance_squared_to(global_position) < 0.8:
		if stuckCount < stuckMax:
			stuckCount += 1
			
	if stuckCount >= 3:
		if (global_position.distance_squared_to(navPathGoalPosition)) < 10.0 || stuckCount > stuckMax:
			stuckCount = 0
			
			beanNA.emit_signal("navigation_finished")
			beanNA.set_target_position(global_position)
			speed = 0

func _on_navigation_agent_3d_velocity_computed(safe_velocity):
	velocity = safe_velocity
	move_and_slide()

func _on_navigation_agent_3d_navigation_finished():
	speed = 0
	beanNA.set_target_position(global_position)
	hasStopped = true

func _on_stuck_timer_timeout():
	StuckCheck()
